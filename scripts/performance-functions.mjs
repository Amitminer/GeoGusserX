/**
 * Simple performance test functions for scripts (using console.log)
 */

import { generateRandomLocation, generateLocationByCountry } from '../lib/locations/index.ts';

/**
 * Quick performance test for development
 */
export function quickPerformanceTest() {
  console.log('‚ö° Quick Performance Test');
  console.log('=' .repeat(50));
  
  const iterations = 1000;
  
  const start = performance.now();
  for (let i = 0; i < iterations; i++) {
    generateRandomLocation();
  }
  const time = performance.now() - start;
  
  console.log(`\nüìà RESULTS:`);
  console.log(`Total Time: ${time.toFixed(2)}ms (milliseconds to generate ${iterations} locations)`);
  console.log(`Throughput: ${Math.round(iterations/time*1000).toLocaleString()} locations/sec (locations generated per second)`);
  console.log(`Per Location: ${(time/iterations*1000).toFixed(3)}Œºs (microseconds per single location)`);
  
  console.log(`\nüí° EXPLANATION:`);
  console.log(`‚Ä¢ Throughput shows how many locations can be generated in 1 second`);
  console.log(`‚Ä¢ Œºs (microseconds) = 1/1,000,000 of a second (smaller is faster)`);
  console.log(`‚Ä¢ Higher locations/sec = better performance for many users`);
  console.log(`‚Ä¢ Lower Œºs per location = faster individual location generation`);
}

/**
 * Run comprehensive performance test
 */
export function runPerformanceTest(iterations = 10000) {
  console.log('üöÄ GeoGusserX Location Generation Performance Test');
  console.log('='.repeat(60));
  
  console.log(`\nüìä Testing with ${iterations} iterations...\n`);
  
  // Test 1: Random Location Generation
  console.log('üé≤ Random Location Generation:');
  
  const start1 = performance.now();
  for (let i = 0; i < iterations; i++) {
    generateRandomLocation();
  }
  const randomTime = performance.now() - start1;
  
  console.log(`  üï∞Ô∏è Time: ${randomTime.toFixed(2)}ms (total time for ${iterations.toLocaleString()} locations)`);
  console.log(`  üöÄ Speed: ${Math.round(iterations/randomTime*1000).toLocaleString()} locations/sec (throughput)`);
  console.log(`  ‚ö° Per Location: ${(randomTime/iterations*1000).toFixed(3)}Œºs (microseconds each)`);
  
  // Test 2: Country-Specific Generation
  console.log('\nüåç Country-Specific Generation (India):');
  
  const start2 = performance.now();
  for (let i = 0; i < iterations; i++) {
    generateLocationByCountry('India');
  }
  const countryTime = performance.now() - start2;
  
  console.log(`  üï∞Ô∏è Time: ${countryTime.toFixed(2)}ms (total time for ${iterations.toLocaleString()} India locations)`);
  console.log(`  üöÄ Speed: ${Math.round(iterations/countryTime*1000).toLocaleString()} locations/sec (country-specific throughput)`);
  console.log(`  ‚ö° Per Location: ${(countryTime/iterations*1000).toFixed(3)}Œºs (microseconds each with country filter)`);
  
  // Test 3: Scalability Test (only for scale command)
  if (iterations >= 50000) {
    console.log('\nüìà Scalability Test Results:');
    console.log(`  ${iterations} Locations: ${randomTime.toFixed(2)}ms`);
    console.log(`  Throughput: ${Math.round(iterations/randomTime*1000)} locations/sec`);
    console.log(`  Per Location: ${(randomTime/iterations*1000).toFixed(3)}Œºs`);
  }
  
  // Summary
  console.log('\n' + '=' .repeat(60));
  console.log('üìã PERFORMANCE SUMMARY:');
  console.log(`‚úÖ Random Generation: ${Math.round(iterations/randomTime*1000).toLocaleString()} ops/sec`);
  console.log(`‚úÖ Country Generation: ${Math.round(iterations/countryTime*1000).toLocaleString()} ops/sec`);
  console.log(`‚úÖ Ready for high-performance usage! üéØ`);
  
  console.log('\nüí° PERFORMANCE METRICS EXPLAINED:');
  console.log('üï∞Ô∏è TIME UNITS:');
  console.log('  ‚Ä¢ ms (milliseconds) = 1/1,000 of a second');
  console.log('  ‚Ä¢ Œºs (microseconds) = 1/1,000,000 of a second');
  console.log('  ‚Ä¢ Smaller time = faster performance');
  
  console.log('\nüöÄ THROUGHPUT (ops/sec):');
  console.log('  ‚Ä¢ How many locations generated per second');
  console.log('  ‚Ä¢ Higher = better for concurrent users');
  console.log('  ‚Ä¢ 400k+ ops/sec = excellent performance');
  
  console.log('\nüéØ REAL-WORLD IMPACT:');
  console.log('  ‚Ä¢ 1 user needs ~1 location every 10-30 seconds');
  console.log('  ‚Ä¢ 100k ops/sec supports 100,000+ concurrent users');
  console.log('  ‚Ä¢ Country filtering adds minimal overhead');
  console.log('=' .repeat(60));
}

/**
 * Test different country lookups
 */
export function testCountryLookups(iterations = 1000) {
  console.log('üîç Testing Country Lookup Performance');
  console.log('=' .repeat(50));
  console.log(`Testing ${iterations.toLocaleString()} iterations per country\n`);
  
  const countries = ['India', 'China', 'USA', 'Brazil', 'Russia', 'Australia'];
  const results = [];
  
  for (const country of countries) {
    const start = performance.now();
    for (let i = 0; i < iterations; i++) {
      generateLocationByCountry(country);
    }
    const time = performance.now() - start;
    const opsPerSec = Math.round(iterations/time*1000);
    
    console.log(`üåç ${country.padEnd(10)}: ${time.toFixed(2)}ms | ${opsPerSec.toLocaleString().padStart(8)} ops/sec`);
    results.push({ country, time, opsPerSec });
  }
  
  // Analysis
  const avgOpsPerSec = Math.round(results.reduce((sum, r) => sum + r.opsPerSec, 0) / results.length);
  const fastest = results.reduce((max, r) => r.opsPerSec > max.opsPerSec ? r : max);
  const slowest = results.reduce((min, r) => r.opsPerSec < min.opsPerSec ? r : min);
  
  console.log('\n' + '=' .repeat(50));
  console.log('üìã COUNTRY LOOKUP ANALYSIS:');
  console.log(`üìà Average Performance: ${avgOpsPerSec.toLocaleString()} ops/sec`);
  console.log(`üèÜ Fastest: ${fastest.country} (${fastest.opsPerSec.toLocaleString()} ops/sec)`);
  console.log(`üê¢ Slowest: ${slowest.country} (${slowest.opsPerSec.toLocaleString()} ops/sec)`);
  
  console.log('\nüí° WHAT THIS MEANS:');
  console.log('  ‚Ä¢ All countries use optimized O(1) hash map lookups');
  console.log('  ‚Ä¢ Performance differences are due to region count per country');
  console.log('  ‚Ä¢ Countries with more regions may be slightly slower');
  console.log('  ‚Ä¢ All results show excellent performance for real-world usage');
  console.log('=' .repeat(50));
}